/*
 * generated by Xtext
 */
package at.ac.tuwien.big.forms.form.scoping;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import at.ac.tuwien.big.forms.Attribute;
import at.ac.tuwien.big.forms.AttributePageElement;
import at.ac.tuwien.big.forms.AttributeValueCondition;
import at.ac.tuwien.big.forms.Column;
import at.ac.tuwien.big.forms.Condition;
import at.ac.tuwien.big.forms.Entity;
import at.ac.tuwien.big.forms.Form;
import at.ac.tuwien.big.forms.Page;
import at.ac.tuwien.big.forms.PageElement;
import at.ac.tuwien.big.forms.Relationship;
import at.ac.tuwien.big.forms.RelationshipPageElement;
import at.ac.tuwien.big.forms.Table;


/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
public class FormScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	
	IScope scope_AttributePageElement_attribute(AttributePageElement ctx_attributePageElement, EReference ref) {
		EList<Attribute> attributes = new BasicEList<Attribute>();
		Entity entity = null;
		
		// Column
		if (ctx_attributePageElement instanceof Column) {
			// set the Entity as the target of the Relationship from the Table
			Column column = (Column) ctx_attributePageElement;
			Table table = (Table) column.eContainer();
			Relationship relationship = table.getRelationship();
			entity = relationship.getTarget();
		// other AttributePageElements (TextField, TextArea, SelectionField, ...)
		} else {		
			// traverse back to Form to get corresponding Entity (PageElement -> Page -> Form)
			Form form = (Form) ctx_attributePageElement.eContainer().eContainer();
			entity = form.getEntity();			
		}
		
		// filter out the all Attributes from the Entity's Features and its super Entities
		while (entity != null) {
			attributes.addAll(filter(entity.getFeatures(), Attribute.class));
			// look for super types
			entity = entity.getSuperType();
		}
		
		return Scopes.scopeFor(attributes);
	}
	
	IScope scope_RelationshipPageElement_relationship(RelationshipPageElement ctx_relationshipPageElement, EReference ref) {
		EList<Relationship> relationshipsInEntity = new BasicEList<Relationship>();
		// traverse back to Form to get corresponding Entity (PageElement -> Page -> Form)
		Form form = (Form) ctx_relationshipPageElement.eContainer().eContainer();
		Entity entity = form.getEntity();
		
		// filter out the all Relationships from the Entity's Features and its super Entities
		while (entity != null) {
			relationshipsInEntity.addAll(filter(entity.getFeatures(), Relationship.class));
			// look for super types
			entity = entity.getSuperType();
		}
		
		return Scopes.scopeFor(relationshipsInEntity);
	}	
	
	IScope scope_AttributeValueCondition_attribute(AttributeValueCondition ctx_attAttributeValueCondition, EReference ref) {
		EList<Attribute> attributes = new BasicEList<Attribute>();
		// traverse back to Form to get corresponding Entity
		EObject parent = ctx_attAttributeValueCondition.eContainer();
		EObject pageOrPageElement = parent;
		// Condition -> ... -> Condtion -> PageElement or Page
		if (parent instanceof Condition) {
			while (parent instanceof Condition)
				parent = parent.eContainer();
			pageOrPageElement = parent;
		}
		
		Page page = null;
		
		// PageElement -> Page -> Form
		if (pageOrPageElement instanceof PageElement)
			page = (Page) ((PageElement) pageOrPageElement).eContainer();
		// Page -> Form
		else if (pageOrPageElement instanceof Page)
			page = (Page) pageOrPageElement;
		
		
		Form form = (Form) page.eContainer();
		Entity entity = form.getEntity();
		
		// filter out the all Attributes from the Entity's Features and its super Entities
		while (entity != null) {
			attributes.addAll(filter(entity.getFeatures(), Attribute.class));
			// look for super types
			entity = entity.getSuperType();
		}
		
		return Scopes.scopeFor(attributes);
	}
	
	/**
	 * Checks if the elements of the delivered list are from a certain EClass and return a list of them. 
	 * @param list A EList containing extended types of EObjects
	 * @param eClass A EClass which will be checked
	 * @return A EList of the type eClass containing all eClass elements form list.
	 */
	@SuppressWarnings("unchecked")
	private <T> EList<T> filter(EList<? extends EObject> list, Class<T> eClass) {
		EList<T> elist = new BasicEList<T>();
		
		for (EObject elem : list) {			
			if (eClass.isInstance(elem)) {
				elist.add((T) elem);
			}
		}
		
		return elist;
	}
}
