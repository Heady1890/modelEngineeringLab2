/*
 * generated by Xtext
 */
package at.ac.tuwien.big.forms.form.scoping;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import at.ac.tuwien.big.forms.Attribute;
import at.ac.tuwien.big.forms.AttributePageElement;
import at.ac.tuwien.big.forms.Entity;
import at.ac.tuwien.big.forms.Form;
import at.ac.tuwien.big.forms.Relationship;
import at.ac.tuwien.big.forms.RelationshipPageElement;


/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
public class FormScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	
	IScope scope_AttributePageElement_attribute(AttributePageElement ctx_attributePageElement, EReference ref) {
		EList<Attribute> attributesInEntity = new BasicEList<Attribute>();
		// traverse back to Form to get corresponding Entity (PageElement -> Page -> Form)
		Form form = (Form) ctx_attributePageElement.eContainer().eContainer();
		Entity entity = form.getEntity();
		
		while (entity != null) {
			attributesInEntity.addAll(filter(entity.getFeatures(), Attribute.class));
			// look for super types
			entity = entity.getSuperType();
		}
		
		return Scopes.scopeFor(attributesInEntity);
	}
	
	IScope scope_RelationshipPageElement_relationship(RelationshipPageElement ctx_relationshipPageElement, EReference ref) {
		EList<Relationship> relationshipsInEntity = new BasicEList<Relationship>();
		// traverse back to Form to get corresponding Entity (PageElement -> Page -> Form)
		Form form = (Form) ctx_relationshipPageElement.eContainer().eContainer();
		Entity entity = form.getEntity();
		
		while (entity != null) {
			relationshipsInEntity.addAll(filter(entity.getFeatures(), Relationship.class));
			// look for super types
			entity = entity.getSuperType();
		}
		
		return Scopes.scopeFor(relationshipsInEntity);
	}
	
	/*IScope scope_Column_attribute(Column ctx_column, EReference ref) {
		EList<Attribute> attributes = new BasicEList<Attribute>();
		
		Table table = (Table) ctx_column.eContainer();
		Relationship relationship = table.getRelationship();
		Entity targetEntity = relationship.getTarget();
		
		while (targetEntity != null) {
			attributes.addAll(filter(targetEntity.getFeatures(), Attribute.class));
			// look for super types
			targetEntity = targetEntity.getSuperType();
		}
		
		return Scopes.scopeFor(attributes);
	}*/
	
	@SuppressWarnings("unchecked")
	private <T> EList<T> filter(EList<? extends EObject> list, Class<T> eClass) {
		EList<T> elist = new BasicEList<T>();
		
		for (EObject elem : list) {			
			if (eClass.isInstance(elem)) {
				elist.add((T) elem);
			}
		}
		
		return elist;
	}
}
